name: Amazon Linux 2023 RPM Build and Test

on:
  pull_request_target:

permissions:
  id-token: write
  contents: read

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
  S3_REGION: ${{ vars.S3_REGION }}


jobs:
  al2023-package-test:
    name: Amazon Linux 2023 RPM Build and Test
    runs-on: ubuntu-latest
    environment: PR integration tests
    container:
      image: amazonlinux:2023
      options: --privileged

    steps:
    - name: Install Git
      run: dnf -y install git

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: ${{ vars.ACTIONS_IAM_ROLE }}
        aws-region: ${{ vars.S3_REGION }}

    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        submodules: true
        persist-credentials: false

    - name: Install build tools and dependencies
      run: |
        dnf -y install rpm-build rpmdevtools make git \
                      mock \
                      ca-certificates \
                      python3 \
                      rust \
                      cargo \
                      awscli \
                      sudo
                      
        cargo install cargo-about

    - name: Generate Amazon Linux 2023 spec file
      run: |
        cd "$GITHUB_WORKSPACE"
        python3 package/generate_spec.py amzn2023
        ls -la

    - name: Build source tarball and SRPM
      run: |
        VERSION=$(awk '/^Version:/ {print $2}' package/amzn2023-packaging.spec)
        
        cargo vendor
        
        cargo about generate --config package/attribution.toml --output-file THIRD_PARTY_LICENSES package/attribution.hbs

        rpmdev-setuptree

        cp package/amzn2023-packaging.spec ~/rpmbuild/SPECS/
        cp LICENSE NOTICE THIRD_PARTY_LICENSES ~/rpmbuild/SOURCES

        cd ..
        tar -czf "mountpoint-s3-${VERSION}.tar.gz" mountpoint-s3
        ls -la

        cp "mountpoint-s3-${VERSION}.tar.gz" ~/rpmbuild/SOURCES/

        ls -la ~/rpmbuild/SOURCES/

        rpmbuild -bs ~/rpmbuild/SPECS/amzn2023-packaging.spec
        
        ls -la ~/rpmbuild/SRPMS/
    
        echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

    - name: Avoid PAM issues by installing sudo interactively
      run: |
        # https://github.com/geerlingguy/docker-rockylinux9-ansible/issues/6
        chmod 0400 /etc/shadow
    
    - name: Test RPM build with Mock in Amazon Linux 2023 chroot
      run: |
        sudo mock -r amazonlinux-2023-x86_64 --rebuild "~/rpmbuild/SRPMS/mount-s3-${VERSION}-amzn2023.src.rpm"

        ls -la /var/lib/mock/amazonlinux-2023-x86_64/result/

    - name: Test RPM installation
      run: |
        dnf -y install "/var/lib/mock/amazonlinux-2023-x86_64/result/mount-s3-${VERSION}-amzn2023.x86_64.rpm"

        which mount-s3

        mount-s3 --version

        mount-s3 --help | head -10

        # Show what files were installed
        rpm -ql mount-s3

        # Show detailed package information
        rpm -qi mount-s3

    - name: Basic Functionality Tests
      run: |
        mkdir -p /mnt/s3-test

        TEST_PREFIX="github-actions-tmp/run-${{ github.run_id }}/rpm-test/"

        # Read Test

        echo "Hello from RPM test" | aws s3 cp - "s3://${S3_BUCKET_NAME}/${TEST_PREFIX}test.txt"

        mount-s3 "${S3_BUCKET_NAME}" /mnt/s3-test --prefix="${TEST_PREFIX}" --region="${S3_REGION}"

        cat /mnt/s3-test/test.txt | grep -q "Hello from RPM test"

        aws s3 rm "s3://${S3_BUCKET_NAME}/${TEST_PREFIX}test.txt"

        # Write Test

        # Ensuring write test file doesn't exist in S3 first
        aws s3 rm "s3://${S3_BUCKET_NAME}/${TEST_PREFIX}write-test.txt" || true

        echo "Hello from RPM write test" > /mnt/s3-test/write-test.txt
        
        # Verify the file exists in S3 with correct content
        aws s3 cp "s3://${S3_BUCKET_NAME}/${TEST_PREFIX}write-test.txt" - | grep -q "Hello from RPM write test"
        
        sudo umount /mnt/s3-test

        aws s3 rm "s3://${S3_BUCKET_NAME}/${TEST_PREFIX}write-test.txt"